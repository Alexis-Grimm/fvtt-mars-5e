$size: 1.55em;

$outer-rad: $size;

$width: $outer-rad / 1.401 * 0.85;
$side-len: $width / (2 * 0.851) * 1.08; // surounding circle radius to side length ratio

$inner-sphere-rad: 1.2 * -1.309 * $side-len; //1.309 * $width * .5;

$tilt-angle: 23deg;

$y-off: -0.28 * $width;

$tilt-angle: 90deg - 116.565deg * .5 * 1.14;

$rotate: 108deg;

.mars5e-d12 {
	width: $size;
	height: $size;
	display: inline-block;
	position: absolute;
	perspective: #{10*$size};

	transform-style: preserve-3d;
	transition: transform var(--mars5e-dice-anim-time) linear;

	// transform:  scale3d(0.9, 0.9, 0.9) rotateX(-30deg) rotateY(30deg);
	transform: rotateX(20deg);
		
	.face {
		background: var(--mars5e-dice-color);
		backface-visibility: hidden;
		// clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
		clip-path: polygon(50% 100%, 100% 62%, 82% 0%, 18% 0%, 0% 62%);
		width: $width;
		height: $width;

		position: absolute;
		left: 50%;
		top: 0%;
		margin-left: -#{$size * .29};
		margin-top: #{$size * 0.05};

		transform-origin: top;
	}

	.number {
		color: var(--mars5e-font-color);
		font-family: "Signika", "Modesto Condensed", "Palatino Linotype", serif;
		font-size: 0.75 * $width;
		font-weight: 600;
		margin-top: -0 * $width;
		text-align: center;
		transition: opacity var(--mars5e-dice-anim-time) linear;
		transform: scale(-1, -1);
		opacity: 0.8;
	}
	.face:nth-child(1) {	// top (1)
		width: #{1 * $width};
		// since the pentagon is not perfectly regular i need to adjust top and bottom a bit
		width: #{1.025 * $width};
		height: #{0.99 * $width};
		transform:
			translateY(#{-1.48 * $inner-sphere-rad})
			translateX(#{-.02 * $side-len})
			translateZ(#{-.7 * $side-len})
			rotateY(180deg)
			rotateX(-90deg);

	}
	.face:nth-child(2) {	// bottom (12)
		transform-origin: center;
		width: #{1.025 * $width};
		height: #{0.99 * $width};
		transform:
			translateY(#{.5 * $inner-sphere-rad})
			translateX(#{-.02 * $side-len})
			translateZ(#{-0.08 * $side-len})
			rotateY(180deg)
			rotateX(90deg);
	}
	@for $i from 3 through 12 {
		.face:nth-child(#{$i}) {
			$rotate: $rotate + 108deg !global;

			@if ($i - 3) % 2 == 0 {
				$rot-z: 0deg !global;
				$off-y: 0 !global;

				filter: brightness(1.2);

			} @else {
				$rot-z: 180deg !global;
				$off-y: -5.3*$y-off !global;
				filter: brightness(0.8);
			}
			transform: 
				rotateY(#{$rotate})
				translateY(#{$off-y})
				rotateZ(#{$rot-z})
				translateZ(#{0.688 * $side-len})
				rotateX(#{$tilt-angle});
		}
	}
}

$idx-to-roll: (
	1: 2,
	2: 3,
	3: 6,
	4: 9,
	5: 10,
	6: 8,
	7: 4,
	8: 11,
	9: 5,
	10: 7,
	11: 2,
	12: 1
);

$roll-to-face: (
	1: 2,
	2: 5,
	3: 4,
	4: 11,
	5: 3,
	6: 7,
	7: 12,
	8: 8,
	9: 6,
	10: 9,
	11: 10,
	12: 1
);

.mars5e-dice-container {
	&[data-roll="1"] .mars5e-d12 {
		transform: rotateX(-90deg);

		.face:nth-child(2) {
			.number {
				opacity: 1;
			}
			filter: brightness(1.2);
		}
	}
	&[data-roll="12"] .mars5e-d12 {
		transform: rotateX(90deg);

		.face:nth-child(1) {
			.number {
				opacity: 1;
			}
			filter: brightness(1.2);
		}
	}

	$tilt-angle: -$tilt-angle !global;
	@for $i from 2 through 11 {
		&[data-roll="#{map-get($idx-to-roll, $i)}"] .mars5e-d12 {
			$tilt-angle: -$tilt-angle !global;

			@if ($i - 2) % 2 == 0 {
				$rot-y: 36deg + ($i - 2) * 72deg !global;
				$rot-z: 0deg !global;
			} @else {
				$rot-y: ($i - 2) * 72deg !global;	
				$rot-z: 180deg !global;
			}

			transform: rotateZ($rot-z) rotateX(#{1*$tilt-angle}) rotateY($rot-y);

			.face:nth-child(#{map-get($roll-to-face, map-get($idx-to-roll, $i))}) {
				.number {
					opacity: 1;
				}
				filter: brightness(1.2);
			}
		}
	}
	&[data-roll] {
		.mars5e-d12 {
			.face {
				filter: brightness(0.8);
			}
			.number {
				opacity: 0.4;
			}
		}
	}
}