@use "sass:map";

// $triwidth: 0.5em;

// $sqrt3: 1.732;
// $tilt: 52.62deg; // asin(tan(54deg)/sqrt(3))
// $capheight: -1.051 * $triwidth; // sqrt(3-tan(54deg) ^2 ) 
// $triheight: $triwidth * $sqrt3;
// $vshift: $capheight + $triheight / 2;

// $innerradius: 1.376 * $triwidth; // tan(54deg)
// $outerradius: 1.701 * $triwidth; // 1/cos(54deg)
// $sidetilt: 10.81deg; // asin( (sec(54deg)-tan(54deg))/sqrt(3) )
// $sideheight: $outerradius; // !!! sqrt(3-(sec(54deg)-tan(54deg))^2)
// $vshift2: $sideheight + $triheight - $vshift;

// $width: 1em;
// $sqrt3: 1.732;

// $offset : 0.215 * $width; // so many magic numbers! 0.225 from example but.. this one works better
// $zOffset: 0.3875em;
// $yOffset: -0.75em;
// // $innerRad: 0.756*$width;	// correct formula
// $innerRad: 0.745*$width; // 0.775 calculated from example, but this looks better!
// $shiftV: -0.15 * $width; 

// $d20-origin: 
// 		rotateY(5deg) /*5*/ 
// 		rotateX(-10deg) 
// 		translateX(0.45em) 
// 		translateY(0.5em);
// $d20-20:
// 		rotateY(-5deg)  /*-5*/
// 		rotateX(-55deg) 
// 		rotateY(72deg)
// 		#{$d20-origin};
// $d20-1: 
// 		rotateZ(5deg) 
// 		rotateY(15deg) 
// 		rotateX(-55deg) 
// 		rotateY(110deg) 
// 		rotateZ(-180deg)
// 		#{$d20-origin}; //rotateX(-50deg) rotateY(-120deg)  rotateZ(180deg) 

// $d20-8:
// 		rotateZ(180deg)
// 		#{$d20-origin};
// $d20-12:
// 		rotateX(15deg)
// 		rotateZ(-190deg)
// 		rotateY(65deg)
// 		#{$d20-origin};
// $d20-10:
// 		rotateX(15deg)
// 		rotateZ(-185deg)
// 		rotateY(140deg)
// 		#{$d20-origin};
// $d20-15:
// 		rotateX(20deg)
// 		rotateZ(-177deg)
// 		rotateY(208deg)
// 		#{$d20-origin};
// $d20-7:
// 		rotateX(10deg)
// 		rotateZ(-175deg)
// 		rotateY(280deg)
// 		#{$d20-origin};

// $d20-6:
// 		rotateX(10deg)
// 		rotateZ(-5deg)
// 		rotateY(36deg)
// 		#{$d20-origin};
// $d20-14:
// 		rotateX(10deg)
// 		rotateZ(-10deg)
// 		rotateY(108deg)
// 		#{$d20-origin};
// $d20-13:
// 		rotateX(10deg)
// 		rotateY(180deg)
// 		#{$d20-origin};
// $d20-9:
// 		rotateX(10deg)
// 		rotateZ(5deg)
// 		rotateY(247deg)
// 		#{$d20-origin};
// $d20-11:
// 		rotateX(10deg)
// 		rotateZ(5deg)
// 		rotateY(320deg)
// 		#{$d20-origin};

// $d20-18:
// 		rotateX(-55deg) 
// 		rotateY(0deg)
// 		#{$d20-origin};
// $d20-5:
// 		rotateX(-55deg) 
// 		rotateY(144deg)
// 		#{$d20-origin};
// $d20-4:
// 		rotateZ(5deg)
// 		rotateX(-45deg) 
// 		rotateY(216deg)
// 		#{$d20-origin};
// $d20-2:
// 		rotateZ(5deg)
// 		rotateX(-45deg) 
// 		rotateY(288deg)
// 		#{$d20-origin};

// $d20-3:
// 		rotateX(-40deg) 
// 		rotateY(182deg) 
// 		rotateZ(-180deg)
// 		#{$d20-origin};
// $d20-19:
// 		rotateZ(-10deg)
// 		rotateY(-5deg)
// 		rotateX(-45deg) 
// 		rotateY(254deg) 
// 		rotateZ(-180deg)
// 		#{$d20-origin};
// $d20-17:
// 		rotateZ(-5deg)
// 		rotateY(-5deg)
// 		rotateX(-65deg) 
// 		rotateY(326deg) 
// 		rotateZ(-180deg)
// 		#{$d20-origin};
// $d20-16:
// 		rotateY(10deg)
// 		rotateX(-65deg) 
// 		rotateY(38deg) 
// 		rotateZ(-180deg)
// 		#{$d20-origin};

// $d20-second-trafo: scale3d(0.8, 0.8, 0.8) translateZ(-3em) translateX(1.5em) ;

// $faces: (
// 	1: 18,
// 	2: 2,
// 	3: 4,
// 	4: 5,
// 	5: 20,
// 	6: 8,
// 	7: 7,
// 	8: 15,
// 	9: 10,
// 	10: 12,
// 	11: 11,
// 	12: 9,
// 	13: 13,
// 	14: 14,
// 	15: 6,
// 	16: 16,
// 	17: 1,
// 	18: 3,
// 	19: 19,
// 	20: 17
// );
// $trafos: (
// 	1: $d20-1,
// 	2: $d20-2,
// 	3: $d20-3,
// 	4: $d20-4,
// 	5: $d20-5,
// 	6: $d20-6,
// 	7: $d20-7,
// 	8: $d20-8,
// 	9: $d20-9,
// 	10: $d20-10,
// 	11: $d20-11,
// 	12: $d20-12,
// 	13: $d20-13,
// 	14: $d20-14,
// 	15: $d20-15,
// 	16: $d20-16,
// 	17: $d20-17,
// 	18: $d20-18,
// 	19: $d20-19,
// 	20: $d20-20,
// );

// .mars5e-d20 {
// 	--dice-color: var(--mars5e-dice-color);
// 	--font-color: var(--mars5e-font-color);

// 	width: #{2.5 * $innerRad};
// 	height: #{2.5 * $innerRad};
// 	display: inline-block;
// 	position: absolute;
// 	perspective: 10em;
// 	transform:  $d20-16;// $d20-origin-trafo;
// 	// top: 50%; left: 50%;
	


// 	transform-style: preserve-3d;
// 	transition: transform var(--mars5e-dice-anim-time) ease-in-out;

// 	.number {
// 		color: var(--font-color);
// 		font-family: 'RobotoCondensed', sans-serif;
// 		font-size: 0.6em;
// 		font-weight: 600;
// 		// text-shadow: 1px 1px 8px rgba(0, 0, 0, 1);
// 		margin-top: 0.4em;
// 		text-align: center;
// 		transition: opacity var(--mars5e-dice-anim-time) ease-in-out;
// 	}

// 	.face {
// 		background: var(--dice-color);
// 		backface-visibility: hidden;
// 		clip-path:  polygon(50% 0%, 0% 100%, 100% 100%);
// 		width: $width;
// 		height: $sqrt3 * 0.5 * $width;
// 		position: absolute;
// 	}


// 	@for $i from 1 through 5 { // top
// 		.face:nth-child(#{$i}) {
// 			transform: 
// 					translateY(#{-$offset}) 
// 					rotateY(#{($i - 1) * 72deg}) 
// 					rotateX(53deg) 
// 					translateZ(#{$width * 0.56}); // Magic number.. 0.58 calculated from example
// 					@if ($i % 2 == 0) {
// 						filter: brightness(1.2);
// 					} else {
// 						filter: brightness(0.8);
// 					}
// 		}
// 	}

// 	@for $i from 16 through 20 { // bottom
// 		.face:nth-child(#{$i}) {
// 			transform: 
// 					translateY(#{$offset})
// 					rotateY(36deg)
// 					rotateY(#{($i - 16) * 72deg})
// 					rotateX(-53deg)
// 					rotateZ(180deg)
// 					translateZ(#{$width * 0.56});
// 			@if ($i % 2 == 0) {
// 				filter: brightness(1.2);
// 			} else {
// 				filter: brightness(0.8);
// 			}
// 		}
// 	}

// 	@for $i from 6 through 10 { // top center
// 		.face:nth-child(#{$i}) {
// 			transform: 
// 					rotateY(#{($i - 6) * 72deg})
// 					rotateX(11deg)
// 					rotateZ(180deg)
// 					translateZ($innerRad)
// 					translateY($shiftV);

// 				filter: brightness(0.8);
// 		}
// 	}
// 	@for $i from 11 through 15 { // bottom center
// 		.face:nth-child(#{$i}) {
// 			transform: 
// 					rotateY(#{($i - 11) * 72deg + 36deg})
// 					rotateX(-11deg)
// 					translateZ($innerRad)
// 					translateY($shiftV);
// 			filter: brightness(1.2);
// 		}
// 	}
// }

// .mars5e-dis, .mars5e-adv{
// 	.mars5e-dice-container:not([data-roll]) {
// 		.face .number {
// 			opacity: 0;
// 		}
	
// 		.face:nth-child(5) .number {
// 			opacity: 1;
// 			color: var(--mars5e-success);
// 		}
	
// 		.face:nth-child(17) .number {
// 			opacity: 1;
// 			color: var(--mars5e-fail);
// 		}
// 	}
// } 

// .mars5e-adv .mars5e-dice-container:not([data-roll]) {
// 	&:first-child .mars5e-d20 {
// 		transform: $d20-20; // 20 vorne
// 	}
// 	&:nth-child(2) .mars5e-d20 {
// 		transform: $d20-1; // 20 vorne
// 	}	
// }

// .mars5e-dis .mars5e-dice-container:not([data-roll]) {
// 	&:first-child .mars5e-d20 {
// 		transform: $d20-1; // 20 vorne
// 	}
// 	&:nth-child(2) .mars5e-d20 {
// 		transform: $d20-20; // 20 vorne
// 	}	
// }

// .mars5e-dice-container[data-roll] {
// 	.number {
// 		opacity: 0;
// 	}
// }

// @each $face, $number in $faces {
// 	.mars5e-dice-container[data-roll="#{$number}"] {
// 		.mars5e-d20 {
// 			transform: map-get($trafos, $number);
// 			.face:nth-child(#{$face}) {
// 				filter: brightness(1.2);
// 				.number {
// 					opacity: 1;
// 				}
// 			}
// 		}
// 		&.mars5e-success {
// 			.face:nth-child(#{$face}) {
// 				.number {
// 					color: var(--mars5e-success);
// 				}
// 			}
// 		}
// 		&.mars5e-fail {
// 			.face:nth-child(#{$face}) {
// 				.number {
// 					color: var(--mars5e-fail);
// 				}
// 			}
// 		}
// 	}
// }

$faces: (
	1: 18,
	2: 2,
	3: 4,
	4: 5,
	5: 20,
	6: 8,
	7: 7,
	8: 15,
	9: 10,
	10: 12,
	11: 11,
	12: 9,
	13: 13,
	14: 14,
	15: 6,
	16: 16,
	17: 1,
	18: 3,
	19: 19,
	20: 17
);

$indices: (
	18: 1,
	2: 2,
	4: 3,
	5: 4,
	20: 5,
	8: 6,
	7: 7,
	15: 8,
	10: 9,
	12: 10,
	11: 11,
	9: 12,
	13: 13,
	14: 14,
	6: 15,
	16: 16,
	1: 17,
	3: 18,
	19: 19,
	17: 20
);

// modified version of: https://codepen.io/vicentemundim/pen/cenIh

$containerWidth: 1.75em;
$containerHeight: $containerWidth;

$faceWidth:  $containerWidth*0.5;
$faceHeight: $faceWidth*0.86;

$animationDuration:  3s;

$angle: 53deg;
$ringAngle: -11deg;
$sideAngle: 360deg/5;
$opacity: 0.75;
$color: rgba(30, 180, 20, $opacity);

$rotateX: -$angle;
$translateZ: $faceWidth*0.335;
$translateY: -$faceHeight*0.15;
$translateRingZ: $faceWidth*0.75;
$translateRingY: $faceHeight*0.78 + $translateY;
$translateLowerZ: $translateZ;
$translateLowerY: $faceHeight*0.78 + $translateRingY;

@keyframes roll {
  10% { transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) }
  30% { transform: rotateX(120deg) rotateY(240deg) rotateZ(0deg) translateX(40px) translateY(40px) }
  50% { transform: rotateX(240deg) rotateY(480deg) rotateZ(0deg) translateX(-40px) translateY(-40px) }
  70% { transform: rotateX(360deg) rotateY(720deg) rotateZ(0deg) }
  90% { transform: rotateX(480deg) rotateY(960deg) rotateZ(0deg) }
}

.mars5e-adv {
	.mars5e-dice-container {
		&:nth-child(1) {
			.mars5e-d20 {
				transform: rotateX(-53deg) rotateY(288deg);
			}
		}
		&:nth-child(2) {
			.mars5e-d20 {
				transform: rotateX(127deg) rotateY(-144deg);
			}
		}
	}
}

.mars5e-dis {
	.mars5e-dice-container {
		&:nth-child(1) {
			.mars5e-d20 {
				transform: rotateX(127deg) rotateY(-144deg);
			}
		}
		&:nth-child(2) {
			.mars5e-d20 {
				transform: rotateX(-53deg) rotateY(288deg);
			}
		}
	}
}

/**
 * Rotations for the rolls
**/

.mars5e-rolls .mars5e-dice-container {

	// hide all numbers, so only the rolled number is visible, for better readability
	&[data-roll] .mars5e-d20 .number {
		opacity: 0.4;
	}

  @for $i from 1 through 5 {
    &[data-roll="#{map-get($faces, $i)}"] .mars5e-d20 {
      $angleMultiplier: $i - 1;
      transform: rotateX(-$angle) rotateY($sideAngle * $angleMultiplier);
			
			.face:nth-child(#{$i}) {
				filter: brightness(1.2);
				.number {
					opacity: 1;
				}
			}
		}
		// highlight the number if its a crit or a fail
		&.mars5e-success[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-success);
			}
		}
		&.mars5e-fail[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-fail);
			}
		}
  }
  
  @for $i from 16 through 20 {
    &[data-roll="#{map-get($faces, $i)}"] .mars5e-d20 {
      $angleMultiplier: $i - 15;
			transform: rotateX(-$angle + 180deg) rotateY(-$sideAngle * $angleMultiplier);
			
			.face:nth-child(#{$i}) {
				filter: brightness(1.2);
				.number {
					opacity: 1;
				}
			}
    }
		&.mars5e-success[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-success);
			}
		}
		&.mars5e-fail[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-fail);
			}
		}
  }
  
  @for $i from 6 through 10 {
    &[data-roll="#{map-get($faces, $i)}"] .mars5e-d20 {
      $angleMultiplier: $i - 6;
			transform: rotateX(-$ringAngle) rotateZ(180deg) rotateY($sideAngle * $angleMultiplier);
			
			.face:nth-child(#{$i}) {
				filter: brightness(1.2);
				.number {
					opacity: 1;
				}
			}
    }
		&.mars5e-success[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-success);
			}
		}
		&.mars5e-fail[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-fail);
			}
		}
  }
  
  @for $i from 11 through 15 {
    &[data-roll="#{map-get($faces, $i)}"] .mars5e-d20 {
      $angleMultiplier: $i - 8;
      transform: rotateX(-$ringAngle) rotateY(-$sideAngle * $angleMultiplier - $sideAngle/2);
			
			.face:nth-child(#{$i}) {
				filter: brightness(1.2);
				.number {
					opacity: 1;
				}
			}
    }
		&.mars5e-success[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-success);
			}
		}
		&.mars5e-fail[data-roll="#{map-get($faces, $i)}"] {
			.face:nth-child(#{$i}) .number {
				color: var(--mars5e-fail);
			}
		}
  }
}

.mars5e-d20 {
	perspective: 10em;
  position: absolute;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
	transition: transform var(--mars5e-dice-anim-time) linear;
  cursor: pointer;
  
  transform: rotateZ(10deg) rotateY(-60deg) rotateX(40deg);
    
  .face {
		// background: var(--mars5e-dice-color);
		backface-visibility: hidden;
		// clip-path:  polygon(50% 0%, 0% 100%, 100% 100%);
    $horizontalMargin: -$faceWidth*0.5;
    
    position: absolute;
    left: 50%;
		top: 0;
		margin-left: #{-$faceWidth *.5};
    margin-top: #{$faceHeight * -0.125};
    width: $faceWidth;
    height: $faceHeight;
    transform-style: preserve-3d;
		backface-visibility: hidden;

		width: 0;
		height: 0;

    border-left: $faceWidth*0.5 solid transparent;
    border-right: $faceWidth*0.5 solid transparent;
    border-bottom: $faceHeight solid var(--mars5e-dice-color);
	
		.number {
      // content: counter(steps);
      position: absolute;
      top: $faceHeight*1.2;
      left: -$faceWidth;
      font-size: $faceHeight*0.55;
      text-align: center;
      line-height: $faceHeight*0.9;
      width: $faceWidth*2;
			height: $faceHeight;
			
			font-weight: bold;
			font-family: "Signika", "Modesto Condensed", "Palatino Linotype", serif;
			color: var(--mars5e-font-color);
			opacity: 0.8;
			transition: opacity var(--mars5e-dice-anim-time) linear;
		}

		&:nth-child(#{map-get($indices, 20)}) .number {
			color: var(--mars5e-success);
		}

		&:nth-child(#{map-get($indices, 1)}) .number {
			color: var(--mars5e-fail)
		}
				
		/**
		 * Rotate faces so it looks like a D20
		 */
    @for $i from 1 through 5 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 1;
				transform: rotateY(-$sideAngle * $angleMultiplier) translateZ($translateZ) translateY($translateY) rotateX($angle);
				@if ($i % 2 == 0) {
					filter: brightness(1.2);
				} else {
					filter: brightness(0.8);
				}
      }
    }
      
    @for $i from 16 through 20 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 18;
				transform: rotateY($sideAngle * $angleMultiplier + $sideAngle/2) translateZ($translateLowerZ) translateY($translateLowerY) rotateZ(180deg) rotateX($angle);
				@if ($i % 2 == 0) {
					filter: brightness(1.2);
				} else {
					filter: brightness(0.8);
				}
      }
    }
      
    @for $i from 6 through 10 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 11;
				transform: rotateY(-$sideAngle * $angleMultiplier) translateZ($translateRingZ) translateY($translateRingY) rotateZ(180deg) rotateX($ringAngle);
				@if ($i % 2 == 0) {
					filter: brightness(1.3);
				} else {
					filter: brightness(0.7);
				}
      }
    }
      
    @for $i from 11 through 15 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 8;
				transform: rotateY($sideAngle * $angleMultiplier + $sideAngle/2) translateZ($translateRingZ) translateY($translateRingY) rotateX($ringAngle);
				@if ($i % 2 == 0) {
					filter: brightness(1.2);
				} else {
					filter: brightness(0.8);
				}
      }
    }
  }
}